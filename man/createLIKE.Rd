% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convertToLike.R
\name{createLIKE}
\alias{createLIKE}
\alias{convertToLike}
\title{Create lists of ICD10 codes to be used in generating SQL queries}
\usage{
createLIKE(codes, dict, n = 2, minGroup = 2)

convertToLike(codes, dict, minGroup = 2, maxLength = 3)
}
\arguments{
\item{codes}{A vector of ICD10 codes as strings. Exclusions.}

\item{dict}{A vector of ICD10 codes as strings.}

\item{n}{The length of starting strings used for grouping ICD10 codes.}

\item{minGroup}{The minimum number of occurrences for a starting string pattern
to be put in the \code{$LIKE} list.}

\item{maxLength}{The maximum length of starting strings considered in \code{$LIKE}.}
}
\value{
Both functions return a list object.
\item{LIKE}{Sub-lists of starting string patterns.}
\item{IN}{All other ICD10 codes in \code{codes} that don't match 
those patterns. }
}
\description{
\code{createLIKE} and \code{convertToLike} create two lists of ICD10 codes. The first one contains 
a sets of common patterns of the first few digits of the ICD10 codes, which can 
then be used in "LIKE" SQL commands. The second list contains ICD10 codes that 
don't share common patterns, which can be put in "IN" SQL commands.
}
\details{
\code{convertToLike} performs similar task to \code{createLIKE}, except 
that instead of using a fixed length, it considers all starting strings with length 
from 1 to \code{maxLength}. 

Note that the ICD10 codes in the output are all from \code{codes}.
}
\examples{
ICD9to10.dat = as.data.frame(ICD9to10, stringsAsFactors = FALSE)
# Exclusions
bpExclICD9 <- c(1400:20899,23000:23999,8000:83999,85000:85499,86000:86999,
                90500:90999,92611,92612,929,95200:95299,95800:95999,30400:30429,
                30440:30449,30540:30579,34460,72920:72929,4210,4211,4219,
                03800:03899,73000:73099,78320:78329,78079,78080:78089,28590:28599,
                72142,72191,72270,72273,7244)
bpExclICD10 <- unique(getICD10(bpExclICD9)) 

createLIKE(codes = bpExclICD10, dict = ICD9to10.dat$ICD10)

convertToLike(codes = bpExclICD10, dict = ICD9to10.dat$ICD10, maxLength = 4)
}
